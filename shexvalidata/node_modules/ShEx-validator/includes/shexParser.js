module.exports = ShExParser = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { ShExDoc: peg$parseShExDoc },
            peg$startRuleFunction  = peg$parseShExDoc,

            peg$c0 = peg$FAILED,
            peg$c1 = [],
            peg$c2 = null,
            peg$c3 = function() {
                if (curSubject.length > 0 ||
                    curPredicate.length > 0) {
                    return {_: "Bad end state:",
                        s:curSubject,
                        p:curPredicate,
                        t:db.triples.map(
                            function (t) { return t.toString(); }
                        ).join('\n')
                    };
                }
                // t:db.triples.map( function (t) { console.log(t.toString()); } )
                return curSchema;
            },
            peg$c4 = function(m) { curSchema.init = m; },
            peg$c5 = function(pre, i) { iriResolver.setPrefix(pre, i.lex); },
            peg$c6 = function(i) { iriResolver.setBase(i.lex); },
            peg$c7 = "start",
            peg$c8 = { type: "literal", value: "start", description: "\"start\"" },
            peg$c9 = "=",
            peg$c10 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c11 = function(l) { curSchema.startRule = l; },
            peg$c12 = function(t, m) {
                var r = Object.keys(m).length ? new RDF.UnaryRule(t, false, m, RDF.Position2(line(), column())) : t;
                var b = RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), column(), offset(), 1));
                r.setLabel(b);
                curSchema.add(b, r);
                curSchema.startRule = b;
                return new RDF.ValueReference(b, RDF.Position2(line(), column()));
            },
            peg$c13 = function(v, l, t, m) {
                var r = Object.keys(m).length ? new RDF.UnaryRule(t, false, m, RDF.Position2(line(), column())) : t;
                r.setLabel(l);
                curSchema.add(l, r);
                if (v)
                    curSchema.markVirtual(r);
            },
            peg$c14 = function() { return true; },
            peg$c15 = "{",
            peg$c16 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c17 = "}",
            peg$c18 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c19 = function(includes, exp) {
                // exp could be null if it's an empty (probably parent) rule.
                if (includes.length) {
                    if (exp) { // includes, exp
                        includes.forEach(function (p) {
                            curSchema.hasDerivedShape(p.include, exp); // API reflects that we only care about parent->child map.
                        });
                        if (exp._ == 'AndRule') {
                            exp.prepend(includes);
                            return exp;
                        } else {
                            includes.push(exp);
                            return new RDF.AndRule(includes, RDF.Position2(line(), column()));
                        }
                    } else { // includes, !exp
                        // could set exp to new RDF.EmptyRule(line(), column()) above but end up with pointless disjoint.
                        var ret = new RDF.AndRule(includes, RDF.Position2(line(), column()));
                        includes.forEach(function (p) {
                            curSchema.hasDerivedShape(p.include, ret); // API reflects that we only care about parent->child map.
                        });
                        return ret;
                    }
                } else {
                    if (exp) { // !includes, exp
                        return exp;
                    } else { // !includes, !exp
                        return new RDF.EmptyRule(RDF.Position2(line(), column()));
                    }
                }
            },
            peg$c20 = "&",
            peg$c21 = { type: "literal", value: "&", description: "\"&\"" },
            peg$c22 = function(l) { return new RDF.IncludeRule(l, RDF.Position2(line(), column())); },
            peg$c23 = function(exp, more) {
                if (!more.length) return exp;
                more.unshift(exp)
                return new RDF.OrRule(more, RDF.Position2(line(), column()));
            },
            peg$c24 = "|",
            peg$c25 = { type: "literal", value: "|", description: "\"|\"" },
            peg$c26 = function(exp) { return exp; },
            peg$c27 = function(exp, more) {
                if (!more.length) return exp;
                more.unshift(exp)
                return new RDF.AndRule(more, RDF.Position2(line(), column()));
            },
            peg$c28 = ",",
            peg$c29 = { type: "literal", value: ",", description: "\",\"" },
            peg$c30 = function(i, a) {
                if (curSubject.length > 0)
                    curSubject.pop();
                if (i) a.setRuleID(i); // in case it has an ID but no triples.
                return a;
            },
            peg$c31 = function(inc) { return inc; },
            peg$c32 = "(",
            peg$c33 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c34 = ")",
            peg$c35 = { type: "literal", value: ")", description: "\")\"" },
            peg$c36 = function(i, exp, r, c) {
                if (r)
                    width = r.ends-offset();
                else
                    r = {min: 1, max: 1};
                if (curSubject.length > 0)
                    curSubject.pop();
                if (r.min === 1 && !Object.keys(c).length) {
                    if (i) exp.setRuleID(i); // in case it has an ID but no triples.
                    return exp;
                }
                return new RDF.UnaryRule(exp, r.min !== 1 /* !!! extend to handle n-ary cardinality */, c, RDF.Position2(line(), column()));
            },
            peg$c37 = "$",
            peg$c38 = { type: "literal", value: "$", description: "\"$\"" },
            peg$c39 = function(i) { curSubject.push(i); return i; },
            peg$c40 = "@",
            peg$c41 = { type: "literal", value: "@", description: "\"@\"" },
            peg$c42 = function(l, r, p, c) {
                var v = new RDF.ValueReference(l, RDF.Position5(text(), line(), column(), offset(), l._pos.offset-offset()+l._pos.width));
                var width = v._pos.offset-offset()+v._pos.width;
                if (r)
                    width = r.ends-offset();
                else
                    r = {min: 1, max: 1};
                var ret = new RDF.ConcomitantRule(v, r.min, r.max, c, RDF.Position5(text(), line(), column(), offset(), width));
                if (p) ret.setRuleID(p);
                return ret;
            },
            peg$c43 = "!",
            peg$c44 = { type: "literal", value: "!", description: "\"!\"" },
            peg$c45 = "^",
            peg$c46 = { type: "literal", value: "^", description: "\"^\"" },
            peg$c47 = function(e, a, n, v, d, r, p, c) {
                if (d)
                    throw peg$buildException('default (='+d.toString()+') not currently supported', null, peg$reportedPos);
                var width = v._pos.offset-offset()+v._pos.width;
                if (r)
                    width = r.ends-offset();
                else
                    r = {min: 1, max: 1};
                var ret = new RDF.AtomicRule(e?true:false, a?true:false, n, v, r.min, r.max, c, RDF.Position5(text(), line(), column(), offset(), width));
                if (p) ret.setRuleID(p);
                return ret;
            },
            peg$c48 = function(i) { return new RDF.NameTerm(i, RDF.Position2(line(), column())); },
            peg$c49 = ".",
            peg$c50 = { type: "literal", value: ".", description: "\".\"" },
            peg$c51 = function(excl) { return new RDF.NameWild(excl.list, RDF.Position2(line(), column())); },
            peg$c52 = function(i, patFlag) {
                return patFlag ? new RDF.NamePattern(i, patFlag[3] ? patFlag[3].list : [], RDF.Position2(line(), column())) : new RDF.NameTerm(i, RDF.Position2(line(), column()));
            },
            peg$c53 = function(l) { return new RDF.ValueReference(l, RDF.Position5(text(), line(), column(), offset(), l._pos.offset-offset()+l._pos.width)); },
            peg$c54 = function(r) {
                var b = RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), column(), offset(), 1));
                r.setLabel(b);
                curSchema.add(b, r);
                return new RDF.ValueReference(b, RDF.Position5(text(), line(), column(), offset(), 1)); // Only hilight open brace.
            },
            peg$c55 = function(t) { return new RDF.ValueType(t, RDF.Position5(text(), line(), column(), offset(), t._pos.width)); },
            peg$c56 = function(n) { return new RDF.ValueType(n, RDF.Position5(text(), line(), column(), offset(), n._pos.width)); },
            peg$c57 = function(s) { return new RDF.ValueSet(s.list, RDF.Position5(text(), line(), column(), offset(), s.ends-offset())); },
            peg$c58 = function(excl) { return new RDF.ValueWild(excl.list, RDF.Position5(text(), line(), column(), offset(), excl.ends-offset())); },
            peg$c59 = function(o) { return o; },
            peg$c60 = ";",
            peg$c61 = { type: "literal", value: ";", description: "\";\"" },
            peg$c62 = function(v) { curPredicate.push(v); },
            peg$c63 = function(o, oz) { curPredicate.pop(); },
            peg$c64 = function(n) { db.add(curSubject.peek(), curPredicate.peek(), n); return n; },
            peg$c65 = function(s) { curSubject.pop(); return s; },
            peg$c66 = "[",
            peg$c67 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c68 = function() {
                var ret = RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), column(), offset(), 1));
                curSubject.push(ret);
                return ret;
            },
            peg$c69 = "]",
            peg$c70 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c71 = function(r) { return r; },
            peg$c72 = function() {
                curListHead.push(null);
                curListTail.push(null);
                insertTripleAt.push(db.triples.length);
                curSubject.push(RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), column()-1, offset()-1, 1)));
                curPredicate.push(RDF.IRI(RDF_NS+'first', RDF.Position5(text(), line(), column(), offset(), 1)));
            },
            peg$c73 = function() {
                curSubject.pop();
                curPredicate.pop();
                var nil = RDF.IRI(RDF_NS+'nil', RDF.Position5(text(), line(), column(), offset(), 1));
                if (curListHead.peek() != null) // got some elements
                    db.add(curListTail.peek(),
                        RDF.IRI(RDF_NS+'rest', RDF.Position5(text(), line(), column()-1, offset()-1, 1)),
                        nil);
                db.nextInsertAt = insertTripleAt.pop();
                curListTail.pop();
                var ret = curListHead.pop();
                return (ret == null) ? nil : ret;
            },
            peg$c74 = function(o) {
                var cur = curSubject.peek();
                if (curListHead.peek() == null)
                    curListHead.replace(cur);
                else {
                    db.nextInsertAt = db.triples.length-1;
                    db.add(curListTail.peek(), // last tail
                        RDF.IRI(RDF_NS+'rest', RDF.Position5(text(), line(), column(), offset(), 1)),
                        cur);
                    db.nextInsertAt = null;
                }
                var next = RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), o._pos.column-2, o._pos.offset-2, 1));
                curListTail.replace(cur);
                curSubject.replace(next);
                curPredicate.replace(RDF.IRI(RDF_NS+'first', RDF.Position5(text(), line(), o._pos.column-1, o._pos.offset-1, 1)));
            },
            peg$c75 = function() {
                if (curSubject.length > 0)
                    return curSubject.slice(-1)[0]; // curSubject was set by $_id rule
                var ret = RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), column(), offset(), 1));
                curSubject.push(ret);
                return ret;
            },
            peg$c76 = function(ex) { return ex.length ? {ends: ex[ex.length-1]._pos.offset+ex[ex.length-1]._pos.width , list:ex} : {ends:offset(), list:[]}; },
            peg$c77 = "-",
            peg$c78 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c79 = function(i) { return i; },
            peg$c80 = "*",
            peg$c81 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c82 = function() { return {min: 0, max: undefined, ends: offset()+1}; },
            peg$c83 = "+",
            peg$c84 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c85 = function() { return {min: 1, max: undefined, ends: offset()+1}; },
            peg$c86 = "?",
            peg$c87 = { type: "literal", value: "?", description: "\"?\"" },
            peg$c88 = function() { return {min: 0, max: 1, ends: offset()+1}; },
            peg$c89 = function(min, max, c) { return {min: min, max: max === null ? min : max, ends: c}; },
            peg$c90 = function() { return offset()+1; },
            peg$c91 = function(max) { return max ? max : undefined; },
            peg$c92 = function() { return undefined; },
            peg$c93 = function(o, c) { return {ends:c, list:o}; },
            peg$c94 = function(codeList) {
                var ret = {};
                for (var i = 0; i < codeList.length; ++i)
                    ret[codeList[i].label] = codeList[i];
                return ret;
            },
            peg$c95 = function(c) { return c; },
            peg$c96 = function(i, patFlag) {
                return patFlag
                    ? new RDF.ValuePattern(i, patFlag[3] ? patFlag[3].list : [], RDF.Position5(text(), line(), column(), offset(), patFlag[1]-offset()))
                    : new RDF.ValueTerm(i, RDF.Position5(text(), line(), column(), offset(), i._pos.width));
            },
            peg$c97 = "~",
            peg$c98 = { type: "literal", value: "~", description: "\"~\"" },
            peg$c99 = function(l) { return new RDF.ValueTerm(l, RDF.Position5(text(), line(), column(), offset(), l._pos.width)); },
            peg$c100 = function(value) { return _literalHere(value, 'double'); },
            peg$c101 = function(value) { return _literalHere(value, 'decimal'); },
            peg$c102 = function(value) { return _literalHere(value, 'integer'); },
            peg$c103 = function(s, l) { return RDF.RDFLiteral(s.lex, l, undefined, RDF.Position5(text(), s.line, s.column, s.offset, s.length+1+l._pos.width)); },
            peg$c104 = "^^",
            peg$c105 = { type: "literal", value: "^^", description: "\"^^\"" },
            peg$c106 = function(s, i) { return RDF.RDFLiteral(s.lex, undefined, i, RDF.Position5(text(), s.line, s.column, s.offset, s.length+2+i._pos.width)); },
            peg$c107 = function(s) { return RDF.RDFLiteral(s.lex, undefined, undefined, RDF.Position5(text(), s.line, s.column, s.offset, s.length)); },
            peg$c108 = "true",
            peg$c109 = { type: "literal", value: "true", description: "\"true\"" },
            peg$c110 = function() { return _literalHere('true', 'boolean'); },
            peg$c111 = "false",
            peg$c112 = { type: "literal", value: "false", description: "\"false\"" },
            peg$c113 = function() { return _literalHere('false', 'boolean'); },
            peg$c114 = function(ln) {
                return RDF.IRI(iriResolver.getAbsoluteIRI(iriResolver.getPrefix(ln.prefix) + ln.lex), RDF.Position5(text(), line(), column(), offset(), ln.width));
            },
            peg$c115 = function(p) { return RDF.IRI(iriResolver.getAbsoluteIRI(iriResolver.getPrefix(p)), RDF.Position5(text(), line(), column(), offset(), p.length+1)); },
            peg$c116 = "%",
            peg$c117 = { type: "literal", value: "%", description: "\"%\"" },
            peg$c118 = /^[a-zA-Z+#_]/,
            peg$c119 = { type: "class", value: "[a-zA-Z+#_]", description: "[a-zA-Z+#_]" },
            peg$c120 = /^[a-zA-Z0-9+#_]/,
            peg$c121 = { type: "class", value: "[a-zA-Z0-9+#_]", description: "[a-zA-Z0-9+#_]" },
            peg$c122 = /^[^%\\]/,
            peg$c123 = { type: "class", value: "[^%\\\\]", description: "[^%\\\\]" },
            peg$c124 = "\\",
            peg$c125 = { type: "literal", value: "\\", description: "\"\\\\\"" },
            peg$c126 = function(label, code) {
                return new RDF.Code(label[0]+label[1].join(''), code.join(''), RDF.Position5(text(), line(), column(), offset(), 1+label.length+1+code.length+4));
            },
            peg$c127 = /^[Vv]/,
            peg$c128 = { type: "class", value: "[Vv]", description: "[Vv]" },
            peg$c129 = /^[Ii]/,
            peg$c130 = { type: "class", value: "[Ii]", description: "[Ii]" },
            peg$c131 = /^[Rr]/,
            peg$c132 = { type: "class", value: "[Rr]", description: "[Rr]" },
            peg$c133 = /^[Tt]/,
            peg$c134 = { type: "class", value: "[Tt]", description: "[Tt]" },
            peg$c135 = /^[Uu]/,
            peg$c136 = { type: "class", value: "[Uu]", description: "[Uu]" },
            peg$c137 = /^[Aa]/,
            peg$c138 = { type: "class", value: "[Aa]", description: "[Aa]" },
            peg$c139 = /^[Ll]/,
            peg$c140 = { type: "class", value: "[Ll]", description: "[Ll]" },
            peg$c141 = function() { return RDF.IRI('http://www.w3.org/2013/ShEx/ns#IRI', RDF.Position5(text(), line(), column(), offset(), 3)); },
            peg$c142 = /^[Ee]/,
            peg$c143 = { type: "class", value: "[Ee]", description: "[Ee]" },
            peg$c144 = function() { return RDF.IRI('http://www.w3.org/2013/ShEx/ns#Literal', RDF.Position5(text(), line(), column(), offset(), 3)); },
            peg$c145 = /^[Bb]/,
            peg$c146 = { type: "class", value: "[Bb]", description: "[Bb]" },
            peg$c147 = /^[Nn]/,
            peg$c148 = { type: "class", value: "[Nn]", description: "[Nn]" },
            peg$c149 = /^[Oo]/,
            peg$c150 = { type: "class", value: "[Oo]", description: "[Oo]" },
            peg$c151 = /^[Dd]/,
            peg$c152 = { type: "class", value: "[Dd]", description: "[Dd]" },
            peg$c153 = function() { return RDF.IRI('http://www.w3.org/2013/ShEx/ns#BNode', RDF.Position5(text(), line(), column(), offset(), 3)); },
            peg$c154 = function() { return RDF.IRI('http://www.w3.org/2013/ShEx/ns#NonLiteral', RDF.Position5(text(), line(), column(), offset(), 3)); },
            peg$c155 = "a",
            peg$c156 = { type: "literal", value: "a", description: "\"a\"" },
            peg$c157 = function() { return RDF.IRI(RDF_NS+'type', RDF.Position5(text(), line(), column(), offset(), 1)); },
            peg$c158 = /^[^\0- <>"{}|\^`\\]/,
            peg$c159 = { type: "class", value: "[^\\0- <>\"{}|\\^`\\\\]", description: "[^\\0- <>\"{}|\\^`\\\\]" },
            peg$c160 = function(b, s, e) {
                return RDF.IRI(iriResolver.getAbsoluteIRI(s.join('')), RDF.Position5(text(), line(), column(), offset(), e-b+1));
            },
            peg$c161 = "<",
            peg$c162 = { type: "literal", value: "<", description: "\"<\"" },
            peg$c163 = function() { return offset(); },
            peg$c164 = ">",
            peg$c165 = { type: "literal", value: ">", description: "\">\"" },
            peg$c166 = /^[Cc]/,
            peg$c167 = { type: "class", value: "[Cc]", description: "[Cc]" },
            peg$c168 = /^[Mm]/,
            peg$c169 = { type: "class", value: "[Mm]", description: "[Mm]" },
            peg$c170 = /^[Pp]/,
            peg$c171 = { type: "class", value: "[Pp]", description: "[Pp]" },
            peg$c172 = /^[Ff]/,
            peg$c173 = { type: "class", value: "[Ff]", description: "[Ff]" },
            peg$c174 = /^[Xx]/,
            peg$c175 = { type: "class", value: "[Xx]", description: "[Xx]" },
            peg$c176 = /^[Ss]/,
            peg$c177 = { type: "class", value: "[Ss]", description: "[Ss]" },
            peg$c178 = ":",
            peg$c179 = { type: "literal", value: ":", description: "\":\"" },
            peg$c180 = function(pre) { return pre ? pre : '' },
            peg$c181 = function(pre, l) {
                return {width: pre.length+1+l.length, prefix:pre, lex:l};
            },
            peg$c182 = "_:",
            peg$c183 = { type: "literal", value: "_:", description: "\"_:\"" },
            peg$c184 = /^[a-zA-Z_]/,
            peg$c185 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
            peg$c186 = /^[a-zA-Z0-9_]/,
            peg$c187 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
            peg$c188 = function(first, rest) {
                return RDF.BNode(bnodeScope.uniqueLabel(first+rest.join('')), RDF.Position5(text(), line(), column(), offset(), 2+first.length+rest.length));
            },
            peg$c189 = /^[a-zA-Z]/,
            peg$c190 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
            peg$c191 = /^[a-zA-Z0-9]/,
            peg$c192 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
            peg$c193 = function(s) {
                s[1].splice(0, 0, '');
                var str = s[0].join('')+s[1].reduce(function(a,b){return a+b[0]+b[1].join('');});
                return RDF.LangTag(str, RDF.Position5(text(), line(), column()+1, offset()+1, str.length));
            },
            peg$c194 = /^[+\-]/,
            peg$c195 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
            peg$c196 = /^[0-9]/,
            peg$c197 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c198 = function(sign, s) { if (!sign) sign=''; return sign+s.join(''); },
            peg$c199 = function(sign, l, d) { if (!sign) sign=''; return sign+l.join('')+'.'+d.join(''); },
            peg$c200 = function(sign, v) { if (!sign) sign=''; return sign+v; },
            peg$c201 = function(m, d, e) { return m.join('')+'.'+d.join('')+e; },
            peg$c202 = function(d, e) { return '.'+d.join('')+e; },
            peg$c203 = function(m, e) { return m.join('')+e; },
            peg$c204 = /^[eE]/,
            peg$c205 = { type: "class", value: "[eE]", description: "[eE]" },
            peg$c206 = function(e, sign, l) { if (!sign) sign=''; return e+sign+l.join(''); },
            peg$c207 = function(b, s, e) { return {line:line(), column:column(), offset:offset(), length:e-b+1, lex:s.join('')}; },
            peg$c208 = "'",
            peg$c209 = { type: "literal", value: "'", description: "\"'\"" },
            peg$c210 = /^[^'\\\n\r]/,
            peg$c211 = { type: "class", value: "[^'\\\\\\n\\r]", description: "[^'\\\\\\n\\r]" },
            peg$c212 = "\"",
            peg$c213 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c214 = /^[^"\\\n\r]/,
            peg$c215 = { type: "class", value: "[^\"\\\\\\n\\r]", description: "[^\"\\\\\\n\\r]" },
            peg$c216 = function(b, s, e) { return {line:line(), column:column(), offset:offset(), length:e-b+3, lex:s.join('')}; },
            peg$c217 = "'''",
            peg$c218 = { type: "literal", value: "'''", description: "\"'''\"" },
            peg$c219 = /^[^'\\]/,
            peg$c220 = { type: "class", value: "[^'\\\\]", description: "[^'\\\\]" },
            peg$c221 = function(q, c) { // '
                return q ? q+c : c;
            },
            peg$c222 = "''",
            peg$c223 = { type: "literal", value: "''", description: "\"''\"" },
            peg$c224 = "\"\"\"",
            peg$c225 = { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
            peg$c226 = /^[^"\\]/,
            peg$c227 = { type: "class", value: "[^\"\\\\]", description: "[^\"\\\\]" },
            peg$c228 = function(q, c) { // "
                return q ? q+c : c;
            },
            peg$c229 = "\"\"",
            peg$c230 = { type: "literal", value: "\"\"", description: "\"\\\"\\\"\"" },
            peg$c231 = "\\u",
            peg$c232 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
            peg$c233 = function(s) { return String.fromCharCode(parseInt(s.join(''), 16)); },
            peg$c234 = "\\U",
            peg$c235 = { type: "literal", value: "\\U", description: "\"\\\\U\"" },
            peg$c236 = function(s) {
                var code = parseInt(s.join(''), 16);
                if (code<0x10000) { // RDFa.1.2.0.js:2712
                    return String.fromCharCode(code);
                } else {
                    // Treat this as surrogate pairs until use cases for me to push it up to the toString function. (sigh)
                    var n = code - 0x10000;
                    var h = n >> 10;
                    var l = n & 0x3ff;
                    return String.fromCharCode(h + 0xd800) + String.fromCharCode(l + 0xdc00);
                }
            },
            peg$c237 = /^[tbnrf"'\\]/,
            peg$c238 = { type: "class", value: "[tbnrf\"'\\\\]", description: "[tbnrf\"'\\\\]" },
            peg$c239 = function(r) { // "
                return r=='t' ? '\t'
                    : r=='b' ? '\b'
                    : r=='n' ? '\n'
                    : r=='r' ? '\r'
                    : r=='f' ? '\f'
                    : r=='"' ? '"'
                    : r=='\'' ? '\''
                    : '\\'
            },
            peg$c240 = function(s) { return RDF.BNode(bnodeScope.nextLabel(), RDF.Position5(text(), line(), column(), offset(), s.length+2)); },
            peg$c241 = /^[A-Z]/,
            peg$c242 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
            peg$c243 = /^[a-z]/,
            peg$c244 = { type: "class", value: "[a-z]", description: "[a-z]" },
            peg$c245 = "_",
            peg$c246 = { type: "literal", value: "_", description: "\"_\"" },
            peg$c247 = function(b, r) { return r ? b+r : b; },
            peg$c248 = function(l, r) { return l+r; },
            peg$c249 = function(l, r) { return r ? l+r : l; },
            peg$c250 = function(l, r) { return '%'+l+r; },
            peg$c251 = /^[A-F]/,
            peg$c252 = { type: "class", value: "[A-F]", description: "[A-F]" },
            peg$c253 = /^[a-f]/,
            peg$c254 = { type: "class", value: "[a-f]", description: "[a-f]" },
            peg$c255 = /^[_~.!$&'()*+,;=\/?#@%\-]/,
            peg$c256 = { type: "class", value: "[_~.!$&'()*+,;=\\/?#@%\\-]", description: "[_~.!$&'()*+,;=\\/?#@%\\-]" },
            peg$c257 = function(x) { return ''; },
            peg$c258 = /^[ \t\r\n]/,
            peg$c259 = { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },
            peg$c260 = function() { return ''; },
            peg$c261 = "#",
            peg$c262 = { type: "literal", value: "#", description: "\"#\"" },
            peg$c263 = /^[^\r\n]/,
            peg$c264 = { type: "class", value: "[^\\r\\n]", description: "[^\\r\\n]" },
            peg$c265 = function(comment) { curSchema.addComment(new RDF.Comment(comment.join(''), RDF.Position5(text(), line(), column(), offset(), comment.length+1))); },

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [{ type: "other", description: description }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                    return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found      = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parseShExDoc() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsedirective();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsedirective();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_ssc_statement();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c2;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c3();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_ssc_statement() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_ssc();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsestatement();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsestatement();
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_ssc() {
            var s0, s1;

            s0 = peg$parseshape();
            if (s0 === peg$FAILED) {
                s0 = peg$parsestart();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseCodeMap();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c4(s1);
                    }
                    s0 = s1;
                }
            }

            return s0;
        }

        function peg$parsestatement() {
            var s0;

            s0 = peg$parsedirective();
            if (s0 === peg$FAILED) {
                s0 = peg$parsestart();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseshape();
                }
            }

            return s0;
        }

        function peg$parsedirective() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsesparqlPrefix();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsesparqlBase();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parsesparqlPrefix() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseSPARQL_PREFIX();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsePNAME_NS();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseIRIREF();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c5(s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsesparqlBase() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parseSPARQL_BASE();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseIRIREF();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c6(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsestart() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c7) {
                s1 = peg$c7;
                peg$currPos += 5;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c9;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c10); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsestartRule();
                            if (s5 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsestartRule() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parselabel();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c11(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsetypeSpec();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseCodeMap();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c12(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parseshape() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = peg$parse_VIRTUAL();
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parselabel();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsetypeSpec();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseCodeMap();
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c13(s1, s2, s4, s6);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_VIRTUAL() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parseVIRTUAL();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c14();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsetypeSpec() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseinclude();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseinclude();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                    s2 = peg$c15;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseOrExpression();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c2;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s6 = peg$c17;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                                }
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c19(s1, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseinclude() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 38) {
                s1 = peg$c20;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parselabel();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c22(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseOrExpression() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parseAndExpression();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsedisjoint();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsedisjoint();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c23(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsedisjoint() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
                s1 = peg$c24;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseAndExpression();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c26(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseAndExpression() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parseUnaryExpression();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseconjoint();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseconjoint();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c27(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseconjoint() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s1 = peg$c28;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseUnaryExpression();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c26(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseUnaryExpression() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

            s0 = peg$currPos;
            s1 = peg$parse_id();
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsearc();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c30(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseinclude();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c31(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_id();
                    if (s1 === peg$FAILED) {
                        s1 = peg$c2;
                    }
                    if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s2 = peg$c32;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c33); }
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parseOrExpression();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parse_();
                                    if (s5 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s6 = peg$c34;
                                            peg$currPos++;
                                        } else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                        }
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parse_();
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parserepeatCount();
                                                if (s8 === peg$FAILED) {
                                                    s8 = peg$c2;
                                                }
                                                if (s8 !== peg$FAILED) {
                                                    s9 = peg$parse_();
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parseCodeMap();
                                                        if (s10 !== peg$FAILED) {
                                                            peg$reportedPos = s0;
                                                            s1 = peg$c36(s1, s4, s8, s10);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            return s0;
        }

        function peg$parse_id() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 36) {
                s1 = peg$c37;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseiri();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c39(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parselabel() {
            var s0;

            s0 = peg$parseiri();
            if (s0 === peg$FAILED) {
                s0 = peg$parseBlankNode();
            }

            return s0;
        }

        function peg$parsearc() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

            s0 = peg$currPos;
            s1 = peg$parseCONCOMITANT();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 64) {
                        s3 = peg$c40;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parselabel();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parserepeatCount();
                                    if (s7 === peg$FAILED) {
                                        s7 = peg$c2;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseproperties();
                                            if (s9 === peg$FAILED) {
                                                s9 = peg$c2;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseCodeMap();
                                                    if (s11 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c42(s5, s7, s9, s11);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 33) {
                    s2 = peg$c43;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
                if (s1 === peg$FAILED) {
                    s1 = peg$c2;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 94) {
                        s3 = peg$c45;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                    if (s2 === peg$FAILED) {
                        s2 = peg$c2;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsenameClass();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsevalueClass();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsedefahlt();
                                        if (s7 === peg$FAILED) {
                                            s7 = peg$c2;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parserepeatCount();
                                                if (s9 === peg$FAILED) {
                                                    s9 = peg$c2;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseproperties();
                                                        if (s11 === peg$FAILED) {
                                                            s11 = peg$c2;
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parse_();
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = peg$parseCodeMap();
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$reportedPos = s0;
                                                                    s1 = peg$c47(s1, s2, s3, s5, s7, s9, s11, s13);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parsenameClass() {
            var s0, s1, s2, s3;

            s0 = peg$parse_nmIriStem();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseRDF_TYPE();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c48(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s1 = peg$c49;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexclusions();
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c51(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            return s0;
        }

        function peg$parse_nmIriStem() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = peg$parseiri();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseTILDE();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseexclusions();
                            if (s6 !== peg$FAILED) {
                                s3 = [s3, s4, s5, s6];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c52(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsevalueClass() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 64) {
                s1 = peg$c40;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parselabel();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c53(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsetypeSpec();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c54(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsenodeType();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c55(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseiri();
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c56(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsevalueSet();
                            if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c57(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 46) {
                                    s1 = peg$c49;
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parse_();
                                    if (s2 !== peg$FAILED) {
                                        s3 = peg$parseexclusions();
                                        if (s3 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c58(s3);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsenodeType() {
            var s0;

            s0 = peg$parseIRI();
            if (s0 === peg$FAILED) {
                s0 = peg$parseLITERAL();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseBNODE();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseNONLITERAL();
                    }
                }
            }

            return s0;
        }

        function peg$parsedefahlt() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
                s1 = peg$c9;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_iri_OR_literal();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c59(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_iri_OR_literal() {
            var s0;

            s0 = peg$parseiri();
            if (s0 === peg$FAILED) {
                s0 = peg$parseliteral();
            }

            return s0;
        }

        function peg$parsepredicateObjectList() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseverb();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseobjectList();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                                s7 = peg$c60;
                                peg$currPos++;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c61); }
                            }
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parse_();
                                if (s8 !== peg$FAILED) {
                                    s9 = [];
                                    s10 = peg$currPos;
                                    s11 = peg$parseverb();
                                    if (s11 !== peg$FAILED) {
                                        s12 = peg$parseobjectList();
                                        if (s12 !== peg$FAILED) {
                                            s11 = [s11, s12];
                                            s10 = s11;
                                        } else {
                                            peg$currPos = s10;
                                            s10 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s10;
                                        s10 = peg$c0;
                                    }
                                    while (s10 !== peg$FAILED) {
                                        s9.push(s10);
                                        s10 = peg$currPos;
                                        s11 = peg$parseverb();
                                        if (s11 !== peg$FAILED) {
                                            s12 = peg$parseobjectList();
                                            if (s12 !== peg$FAILED) {
                                                s11 = [s11, s12];
                                                s10 = s11;
                                            } else {
                                                peg$currPos = s10;
                                                s10 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s10;
                                            s10 = peg$c0;
                                        }
                                    }
                                    if (s9 !== peg$FAILED) {
                                        s6 = [s6, s7, s8, s9];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                    s7 = peg$c60;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = [];
                                        s10 = peg$currPos;
                                        s11 = peg$parseverb();
                                        if (s11 !== peg$FAILED) {
                                            s12 = peg$parseobjectList();
                                            if (s12 !== peg$FAILED) {
                                                s11 = [s11, s12];
                                                s10 = s11;
                                            } else {
                                                peg$currPos = s10;
                                                s10 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s10;
                                            s10 = peg$c0;
                                        }
                                        while (s10 !== peg$FAILED) {
                                            s9.push(s10);
                                            s10 = peg$currPos;
                                            s11 = peg$parseverb();
                                            if (s11 !== peg$FAILED) {
                                                s12 = peg$parseobjectList();
                                                if (s12 !== peg$FAILED) {
                                                    s11 = [s11, s12];
                                                    s10 = s11;
                                                } else {
                                                    peg$currPos = s10;
                                                    s10 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s10;
                                                s10 = peg$c0;
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s6 = [s6, s7, s8, s9];
                                            s5 = s6;
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseverb() {
            var s0, s1;

            s0 = peg$currPos;
            s1 = peg$parseiri();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c62(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseRDF_TYPE();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c62(s1);
                }
                s0 = s1;
            }

            return s0;
        }

        function peg$parseobjectList() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseobject();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = peg$parse_();
                    if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s6 = peg$c28;
                            peg$currPos++;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c29); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parse_();
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseobject();
                                if (s8 !== peg$FAILED) {
                                    s5 = [s5, s6, s7, s8];
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$c0;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s6 = peg$c28;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c29); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseobject();
                                    if (s8 !== peg$FAILED) {
                                        s5 = [s5, s6, s7, s8];
                                        s4 = s5;
                                    } else {
                                        peg$currPos = s4;
                                        s4 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$c0;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c63(s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseobject() {
            var s0, s1;

            s0 = peg$currPos;
            s1 = peg$parseiri();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c64(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseBlankNode();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c64(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsecollection();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c64(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseblankNodePropertyList();
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c64(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseliteral();
                            if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c64(s1);
                            }
                            s0 = s1;
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parseblankNodePropertyList() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parse_lbracket();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepredicateObjectList();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_rbracket();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c65(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_lbracket() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c66;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c68();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_rbracket() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 93) {
                s0 = peg$c69;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
            }

            return s0;
        }

        function peg$parsecollection() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parse_openCollection();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parse_members();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parse_members();
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_closeCollection();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c71(s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_openCollection() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c32;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c72();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_closeCollection() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 41) {
                s1 = peg$c34;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c73();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_members() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parseobject();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c74(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseproperties() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parse_lbracket1();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepredicateObjectList();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_rbracket1();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c65(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_lbracket1() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c66;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c75();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_rbracket1() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 93) {
                s0 = peg$c69;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
            }

            return s0;
        }

        function peg$parseexclusions() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_excl();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_excl();
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c76(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_excl() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c77;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseiri();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c79(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parserepeatCount() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c80;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c81); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c82();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 43) {
                    s1 = peg$c83;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c85();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 63) {
                        s1 = peg$c86;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c87); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c88();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parse_openBRACE();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parseINTEGER();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parse_();
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parse_max();
                                    if (s4 === peg$FAILED) {
                                        s4 = peg$c2;
                                    }
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parse_();
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parse_closeBRACE();
                                            if (s6 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c89(s2, s4, s6);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parse_openBRACE() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 123) {
                s0 = peg$c15;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }

            return s0;
        }

        function peg$parse_closeBRACE() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 125) {
                s1 = peg$c17;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c90();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_max() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s1 = peg$c28;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_upper();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c2;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c91(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_upper() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c80;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c81); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c92();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseINTEGER();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c79(s1);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parsevalueSet() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = peg$parse_openPAREN();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parse_values();
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parse_values();
                        }
                    } else {
                        s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_closePAREN();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c93(s3, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_openPAREN() {
            var s0;

            if (input.charCodeAt(peg$currPos) === 40) {
                s0 = peg$c32;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }

            return s0;
        }

        function peg$parse_closePAREN() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 41) {
                s1 = peg$c34;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c90();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_values() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsevalueChoice();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c59(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseCodeMap() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parse_codePair();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parse_codePair();
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c94(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_codePair() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parseCODE();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c95(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_objIriStem() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            s1 = peg$parseiri();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseTILDE();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseexclusions();
                            if (s6 !== peg$FAILED) {
                                s3 = [s3, s4, s5, s6];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c96(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseTILDE() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 126) {
                s1 = peg$c97;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c90();
            }
            s0 = s1;

            return s0;
        }

        function peg$parsevalueChoice() {
            var s0, s1;

            s0 = peg$parse_objIriStem();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseliteral();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c99(s1);
                }
                s0 = s1;
            }

            return s0;
        }

        function peg$parseliteral() {
            var s0;

            s0 = peg$parseRDFLiteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseNumericLiteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseBooleanLiteral();
                }
            }

            return s0;
        }

        function peg$parseNumericLiteral() {
            var s0, s1;

            s0 = peg$currPos;
            s1 = peg$parseDOUBLE();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c100(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDECIMAL();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c101(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseINTEGER();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c102(s1);
                    }
                    s0 = s1;
                }
            }

            return s0;
        }

        function peg$parseRDFLiteral() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            s1 = peg$parseString();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseLANGTAG();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c103(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseString();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c104) {
                            s3 = peg$c104;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c105); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseiri();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c106(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseString();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c107(s1);
                    }
                    s0 = s1;
                }
            }

            return s0;
        }

        function peg$parseBooleanLiteral() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c108) {
                s1 = peg$c108;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c110();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c111) {
                    s1 = peg$c111;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c113();
                }
                s0 = s1;
            }

            return s0;
        }

        function peg$parseString() {
            var s0;

            s0 = peg$parseSTRING_LITERAL_LONG1();
            if (s0 === peg$FAILED) {
                s0 = peg$parseSTRING_LITERAL_LONG2();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseSTRING_LITERAL1();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseSTRING_LITERAL2();
                    }
                }
            }

            return s0;
        }

        function peg$parseiri() {
            var s0;

            s0 = peg$parseIRIREF();
            if (s0 === peg$FAILED) {
                s0 = peg$parsePrefixedName();
            }

            return s0;
        }

        function peg$parsePrefixedName() {
            var s0, s1;

            s0 = peg$currPos;
            s1 = peg$parsePNAME_LN();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c114(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePNAME_NS();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c115(s1);
                }
                s0 = s1;
            }

            return s0;
        }

        function peg$parseBlankNode() {
            var s0;

            s0 = peg$parseBLANK_NODE_LABEL();
            if (s0 === peg$FAILED) {
                s0 = peg$parseANON();
            }

            return s0;
        }

        function peg$parseCODE() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 37) {
                s1 = peg$c116;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c117); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                if (peg$c118.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c119); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c120.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c121); }
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s3 = peg$c15;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        if (peg$c122.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c123); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 92) {
                                s6 = peg$c124;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c125); }
                            }
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 37) {
                                    s7 = peg$c116;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            if (peg$c122.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c123); }
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 92) {
                                    s6 = peg$c124;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c125); }
                                }
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 37) {
                                        s7 = peg$c116;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 37) {
                                s5 = peg$c116;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c117); }
                            }
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s6 = peg$c17;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                                }
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c126(s2, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseVIRTUAL() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            if (peg$c127.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c128); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c129.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c130); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c131.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c132); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c133.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c134); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c135.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c136); }
                            }
                            if (s5 !== peg$FAILED) {
                                if (peg$c137.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                }
                                if (s6 !== peg$FAILED) {
                                    if (peg$c139.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseIRI() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (peg$c129.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c131.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c129.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c130); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c141();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseLITERAL() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            s0 = peg$currPos;
            if (peg$c139.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c129.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c130); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c133.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c134); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c142.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c143); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c131.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c132); }
                            }
                            if (s5 !== peg$FAILED) {
                                if (peg$c137.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                }
                                if (s6 !== peg$FAILED) {
                                    if (peg$c139.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c144();
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseBNODE() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (peg$c145.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c147.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c148); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c149.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c150); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c151.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c152); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c142.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c143); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c153();
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseNONLITERAL() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

            s0 = peg$currPos;
            if (peg$c147.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c148); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c149.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c150); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c147.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c148); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c139.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c129.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c130); }
                            }
                            if (s5 !== peg$FAILED) {
                                if (peg$c133.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                }
                                if (s6 !== peg$FAILED) {
                                    if (peg$c142.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        if (peg$c131.test(input.charAt(peg$currPos))) {
                                            s8 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                        } else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                        }
                                        if (s8 !== peg$FAILED) {
                                            if (peg$c137.test(input.charAt(peg$currPos))) {
                                                s9 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                if (peg$c139.test(input.charAt(peg$currPos))) {
                                                    s10 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c154();
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseRDF_TYPE() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 97) {
                s1 = peg$c155;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c156); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c157();
            }
            s0 = s1;

            return s0;
        }

        function peg$parseIRIREF() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_IRIREF_BEGIN();
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c158.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c159); }
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$parseUCHAR();
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c158.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c159); }
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$parseUCHAR();
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_IRIREF_END();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c160(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_IRIREF_BEGIN() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
                s1 = peg$c161;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c162); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_IRIREF_END() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
                s1 = peg$c164;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c165); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;

            return s0;
        }

        function peg$parseCONCOMITANT() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

            s0 = peg$currPos;
            if (peg$c166.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c167); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c149.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c150); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c147.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c148); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c166.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c167); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c149.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c150); }
                            }
                            if (s5 !== peg$FAILED) {
                                if (peg$c168.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c169); }
                                }
                                if (s6 !== peg$FAILED) {
                                    if (peg$c129.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        if (peg$c133.test(input.charAt(peg$currPos))) {
                                            s8 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                        } else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                        }
                                        if (s8 !== peg$FAILED) {
                                            if (peg$c137.test(input.charAt(peg$currPos))) {
                                                s9 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                if (peg$c147.test(input.charAt(peg$currPos))) {
                                                    s10 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    if (peg$c133.test(input.charAt(peg$currPos))) {
                                                        s11 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    } else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseSPARQL_PREFIX() {
            var s0, s1, s2, s3, s4, s5, s6;

            s0 = peg$currPos;
            if (peg$c170.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c171); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c131.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c142.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c143); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c172.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c173); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c129.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c130); }
                            }
                            if (s5 !== peg$FAILED) {
                                if (peg$c174.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c175); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6];
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseSPARQL_BASE() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (peg$c145.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c137.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c138); }
                }
                if (s2 !== peg$FAILED) {
                    if (peg$c176.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c177); }
                    }
                    if (s3 !== peg$FAILED) {
                        if (peg$c142.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c143); }
                        }
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsePNAME_NS() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsePN_PREFIX();
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s2 = peg$c178;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c180(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsePNAME_LN() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsePNAME_NS();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsePN_LOCAL();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c181(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseBLANK_NODE_LABEL() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c182) {
                s1 = peg$c182;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c183); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c184.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c185); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c186.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c187); }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c186.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c187); }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c188(s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseLANGTAG() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 64) {
                s1 = peg$c40;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = [];
                if (peg$c189.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c190); }
                }
                if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c189.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c190); }
                        }
                    }
                } else {
                    s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s6 = peg$c77;
                        peg$currPos++;
                    } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c78); }
                    }
                    if (s6 !== peg$FAILED) {
                        s7 = [];
                        if (peg$c191.test(input.charAt(peg$currPos))) {
                            s8 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c192); }
                        }
                        if (s8 !== peg$FAILED) {
                            while (s8 !== peg$FAILED) {
                                s7.push(s8);
                                if (peg$c191.test(input.charAt(peg$currPos))) {
                                    s8 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                }
                            }
                        } else {
                            s7 = peg$c0;
                        }
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s6 = peg$c77;
                            peg$currPos++;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = [];
                            if (peg$c191.test(input.charAt(peg$currPos))) {
                                s8 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c192); }
                            }
                            if (s8 !== peg$FAILED) {
                                while (s8 !== peg$FAILED) {
                                    s7.push(s8);
                                    if (peg$c191.test(input.charAt(peg$currPos))) {
                                        s8 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                    }
                                }
                            } else {
                                s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c193(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseINTEGER() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (peg$c194.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c196.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c197); }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c196.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c197); }
                        }
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c198(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseDECIMAL() {
            var s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (peg$c194.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c196.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c197); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s3 = peg$c49;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        if (peg$c196.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c197); }
                        }
                        if (s5 !== peg$FAILED) {
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                if (peg$c196.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c197); }
                                }
                            }
                        } else {
                            s4 = peg$c0;
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c199(s1, s2, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseDOUBLE() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (peg$c194.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_DOUBLE_VAL();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c200(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_DOUBLE_VAL() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = [];
            if (peg$c196.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c197); }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                    s2 = peg$c49;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c196.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c197); }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseEXPONENT();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c201(s1, s3, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                    s1 = peg$c49;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            if (peg$c196.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c197); }
                            }
                        }
                    } else {
                        s2 = peg$c0;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseEXPONENT();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c202(s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                    if (s2 !== peg$FAILED) {
                        while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            if (peg$c196.test(input.charAt(peg$currPos))) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c197); }
                            }
                        }
                    } else {
                        s1 = peg$c0;
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseEXPONENT();
                        if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c203(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            return s0;
        }

        function peg$parseEXPONENT() {
            var s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (peg$c204.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c205); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c194.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c195); }
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            if (peg$c196.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c197); }
                            }
                        }
                    } else {
                        s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c206(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseSTRING_LITERAL1() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_STRING_LITERAL1_DELIM();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_NON_1();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse_NON_1();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_STRING_LITERAL1_DELIM();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c207(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_STRING_LITERAL1_DELIM() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c208;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c209); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_NON_1() {
            var s0;

            if (peg$c210.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c211); }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseECHAR();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseUCHAR();
                }
            }

            return s0;
        }

        function peg$parseSTRING_LITERAL2() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_STRING_LITERAL2_DELIM();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_NON_2();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse_NON_2();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_STRING_LITERAL2_DELIM();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c207(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_STRING_LITERAL2_DELIM() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c212;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c213); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_NON_2() {
            var s0;

            if (peg$c214.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c215); }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseECHAR();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseUCHAR();
                }
            }

            return s0;
        }

        function peg$parseSTRING_LITERAL_LONG1() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_STRING_LITERAL_LONG1_DELIM();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_NON_LONG1();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse_NON_LONG1();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_STRING_LITERAL_LONG1_DELIM();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c216(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_STRING_LITERAL_LONG1_DELIM() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c217) {
                s1 = peg$c217;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c218); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_NON_LONG1() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parse_LONG1();
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                if (peg$c219.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c220); }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c221(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseECHAR();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseUCHAR();
                }
            }

            return s0;
        }

        function peg$parse_LONG1() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c222) {
                s0 = peg$c222;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c223); }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                    s0 = peg$c208;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c209); }
                }
            }

            return s0;
        }

        function peg$parseSTRING_LITERAL_LONG2() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            s1 = peg$parse_STRING_LITERAL_LONG2_DELIM();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_NON_LONG2();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse_NON_LONG2();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_STRING_LITERAL_LONG2_DELIM();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c216(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_STRING_LITERAL_LONG2_DELIM() {
            var s0, s1;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c224) {
                s1 = peg$c224;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c225); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;

            return s0;
        }

        function peg$parse_NON_LONG2() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parse_LONG2();
            if (s1 === peg$FAILED) {
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                if (peg$c226.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c228(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseECHAR();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseUCHAR();
                }
            }

            return s0;
        }

        function peg$parse_LONG2() {
            var s0;

            if (input.substr(peg$currPos, 2) === peg$c229) {
                s0 = peg$c229;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c230); }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                    s0 = peg$c212;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c213); }
                }
            }

            return s0;
        }

        function peg$parseUCHAR() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c231) {
                s1 = peg$c231;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c232); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseHEX();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseHEX();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseHEX();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseHEX();
                            if (s6 !== peg$FAILED) {
                                s3 = [s3, s4, s5, s6];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c233(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c234) {
                    s1 = peg$c234;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c235); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseHEX();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseHEX();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseHEX();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseHEX();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseHEX();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseHEX();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseHEX();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseHEX();
                                                if (s10 !== peg$FAILED) {
                                                    s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                                                    s2 = s3;
                                                } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s2;
                                                s2 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s2;
                                            s2 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$c0;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c236(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parseECHAR() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c124;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c237.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c238); }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c239(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseANON() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c66;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s3 = peg$c69;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c70); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c240(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsePN_CHARS_BASE() {
            var s0;

            if (peg$c241.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c242); }
            }
            if (s0 === peg$FAILED) {
                if (peg$c243.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c244); }
                }
            }

            return s0;
        }

        function peg$parsePN_CHARS_U() {
            var s0;

            s0 = peg$parsePN_CHARS_BASE();
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                    s0 = peg$c245;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c246); }
                }
            }

            return s0;
        }

        function peg$parsePN_CHARS() {
            var s0;

            s0 = peg$parsePN_CHARS_U();
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                    s0 = peg$c77;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s0 === peg$FAILED) {
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s0 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                }
            }

            return s0;
        }

        function peg$parsePN_PREFIX() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsePN_CHARS_BASE();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsePN_PREFIX2();
                if (s2 === peg$FAILED) {
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c247(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsePN_PREFIX2() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c49;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsePN_PREFIX2();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c248(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePN_CHARS();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsePN_PREFIX2();
                    if (s2 === peg$FAILED) {
                        s2 = peg$c2;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c249(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parsePN_LOCAL() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = peg$parsePN_CHARS_U();
            if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s1 = peg$c178;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                }
                if (s1 === peg$FAILED) {
                    if (peg$c196.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c197); }
                    }
                    if (s1 === peg$FAILED) {
                        s1 = peg$parsePLX();
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsePN_LOCAL2();
                if (s2 === peg$FAILED) {
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c249(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parsePN_LOCAL2() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c49;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsePN_LOCAL2();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c248(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePN_CHARS_colon_PLX();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsePN_LOCAL2();
                    if (s2 === peg$FAILED) {
                        s2 = peg$c2;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c249(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            return s0;
        }

        function peg$parsePN_CHARS_colon_PLX() {
            var s0;

            s0 = peg$parsePN_CHARS();
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s0 = peg$c178;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsePLX();
                }
            }

            return s0;
        }

        function peg$parsePLX() {
            var s0;

            s0 = peg$parsePERCENT();
            if (s0 === peg$FAILED) {
                s0 = peg$parsePN_LOCAL_ESC();
            }

            return s0;
        }

        function peg$parsePERCENT() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 37) {
                s1 = peg$c116;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c117); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseHEX();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseHEX();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c250(s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parseHEX() {
            var s0;

            if (peg$c196.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c197); }
            }
            if (s0 === peg$FAILED) {
                if (peg$c251.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c252); }
                }
                if (s0 === peg$FAILED) {
                    if (peg$c253.test(input.charAt(peg$currPos))) {
                        s0 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c254); }
                    }
                }
            }

            return s0;
        }

        function peg$parsePN_LOCAL_ESC() {
            var s0, s1, s2;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c124;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c255.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c256); }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c71(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }

        function peg$parse_() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseWS();
            if (s2 === peg$FAILED) {
                s2 = peg$parseCOMMENT();
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseWS();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseCOMMENT();
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c257(s1);
            }
            s0 = s1;

            return s0;
        }

        function peg$parseWS() {
            var s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            if (peg$c258.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c259); }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c258.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c259); }
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c260();
            }
            s0 = s1;

            return s0;
        }

        function peg$parseCOMMENT() {
            var s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
                s1 = peg$c261;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c262); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c263.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c264); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c263.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c264); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c265(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            return s0;
        }


        function createStack () {
            var ret = [];
            ret.peek = function () { return this.slice(-1)[0]};
            ret.replace = function (elt) { this[this.length-1] = elt; };
            return ret;
        }
        var curSubject   = createStack();
        var curPredicate = createStack();
        var curListHead  = createStack();
        var curListTail  = createStack();
        var insertTripleAt = createStack(); // where to place (collection) triples for nice defaults
        var db = RDF.Dataset();
        db.nextInsertAt = null;
        db.add = function (s, p, o) {
            var t = RDF.Triple(s, p, o);
            if (this.nextInsertAt == null)
                this.push(t);
            else {
                this.insertAt(this.nextInsertAt, t);
                this.nextInsertAt = null;
            }
        }
        var RDF_NS = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
        var XSD_NS = 'http://www.w3.org/2001/XMLSchema#'
        var iriResolver = ("iriResolver" in options) ? options.iriResolver : RDF.createIRIResolver();
        var bnodeScope = ("bnodeScope" in options) ? options.bnodeScope : RDF.createBNodeScope();
        iriResolver.errorHandler = function (message) {
            throw peg$buildException(message, null, peg$reportedPos);
        };

        function _literalHere (value, type) {
            var dt = RDF.IRI(XSD_NS+type, RDF.Position5(text(), line(), column(), offset(), value.length));
            var pos = RDF.Position5(text(), line(), column(), offset(), value.length);
            return RDF.RDFLiteral(value, undefined, dt, pos);
        }

        var curSchema = new RDF.Schema();
        curSchema.db = db;


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
})();
